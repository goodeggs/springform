// Generated by CoffeeScript 1.7.1
var Springform;

Springform = (function() {
  function Springform(attrs) {
    var field, key, value, _i, _len, _ref;
    if (attrs == null) {
      attrs = {};
    }
    for (key in attrs) {
      value = attrs[key];
      this[key] = value;
    }
    if (this.prefix == null) {
      this.prefix = 'springform';
    }
    if (this.fieldErrors == null) {
      this.fieldErrors = {};
    }
    this.formError = null;
    if (this.fields == null) {
      this.fields = [];
    }
    _ref = this.fields;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      field = _ref[_i];
      if (field.label == null) {
        field.label = this.nameToLabel(field.name);
      }
      if (field.id == null) {
        field.id = [this.prefix, field.name].join('-');
      }
      this.fields[field.name] = field;
    }
  }

  Springform.prototype.bind = function(data) {
    this.data = data;
    return this;
  };

  Springform.prototype.prunedData = function() {
    return _(data).pick(_(this.fields).pluck('name'));
  };

  Springform.prototype.errors = function(errors) {
    if (arguments.length) {
      this.formError = errors.formError;
      this.fieldErrors = errors.fieldErrors || [];
      return this;
    } else {
      return {
        formError: this.formError,
        fieldErrors: this.fieldErrors
      };
    }
  };

  Springform.prototype.validate = function() {
    var validator, _i, _len, _ref;
    this.formError = null;
    this.fieldErrors = {};
    _ref = this.validators || [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      validator = _ref[_i];
      validator(this);
    }
    return this;
  };

  Springform.prototype.hasErrors = function() {
    return Object.keys(this.fieldErrors).length > 0 || this.formError;
  };

  Springform.prototype.nameToLabel = function(name) {
    return name;
  };

  return Springform;

})();

Springform.validators = {
  required: function(form) {
    var name, required, value, _i, _len, _ref, _ref1, _results;
    _ref = form.fields;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      _ref1 = _ref[_i], name = _ref1.name, required = _ref1.required;
      value = form.data[name];
      if (required && !(value || value === false)) {
        _results.push(form.fieldErrors[name] = 'required');
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  }
};

module.exports = Springform;
